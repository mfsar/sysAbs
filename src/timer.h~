#ifndef __SYSTEM_TIMER_H__
#define __SYSTEM_TIMER_H__

#include <system/base.h>
#include <stdbool.h>
#include <system/task.h>

typedef struct {
    void *handle;
    system_tick_t period;
} timer_t;
typedef void (*timer_callback_t)(void *handle);

bool timer_init(timer_t *t, timer_callback_t callback);

bool timer_create_2(task_t *t, timer_callback_t callback, system_tick_t period);

bool timer_create(timer_t *t, bool autoreload, timer_callback_t callback,
                  const char *name);
bool timer_start(timer_t *t, system_tick_t period);
bool timer_isr_start(timer_t *t, bool * const woken);
bool timer_reset(timer_t *t);
bool timer_isr_reset(timer_t *t, bool * const woken);
bool timer_stop(timer_t *t);
bool timer_isr_stop(timer_t *t, bool * const woken);
bool timer_is_running(timer_t *t);

#endif /* __SYSTEM_TIMER_H__ */
